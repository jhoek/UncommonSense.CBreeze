<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# 
var aliases = new Dictionary<string, string[]>() {
	{ "Function", new [] { "Procedure" } },
	{ "TestFunction", new [] { "TestFunction" } },
	{ "UpgradeFunction", new [] { "UpgradeFunction" } },
	{ "EventSubscriberFunction", new [] { "EventSubscriber" } },
	{ "BusinessEventPublisherFunction", new [] { "BusinessEvent" } },
	{ "IntegrationEventPublisherFunction", new [] { "IntegrationEvent" } }
};

var conditions = new Dictionary<string, string>() {
	{ "EventSubscriberFunction", "NAV2016" },
	{ "BusinessEventPublisherFunction", "NAV2016" },
	{ "IntegrationEventPublisherFunction", "NAV2016" }
};
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Management.Automation;
using System.Collections.Generic;
using UncommonSense.CBreeze.Common;
using UncommonSense.CBreeze.Core;

namespace UncommonSense.CBreeze.Automation 
{
<# foreach(var functionType in aliases.Keys) { #>
<# if (conditions.ContainsKey(functionType)) { WriteLine("#if {0}", conditions[functionType]); } #>
	[Cmdlet(VerbsCommon.New, "CBreeze<#= functionType #>")]
	[OutputType(typeof(Function))]
	[Alias(<#= string.Join(", ", aliases[functionType].Select(a => $"\"{a}\", \"Add-CBreeze{functionType}\"")) #>)]
	public class NewCBreeze<#= functionType #> : NewItemWithIDAndNameCmdlet<Function, int, PSObject>
	{
		[Parameter()] public SwitchParameter Local { get;set; }
		[Parameter()] public string ReturnValueName { get; set; } 
		[Parameter()] public FunctionReturnValueType? ReturnValueType { get; set; }
		[Parameter()] [ValidateRange(1, int.MaxValue)] public int? ReturnValueDataLength { get; set; }
		[Parameter()] public string ReturnValueDimensions { get; set; }
#if NAV2018
		[Parameter()] public FunctionVisibility? FunctionVisibility {get; set; }
		[Parameter()] public SwitchParameter ServiceEnabled {get;set;}
#endif

		[Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; }

#if NAV2016
		[Parameter()] public SwitchParameter TryFunction { get; set; }
#endif 
<# if (functionType == "TestFunction") { #>
		[Parameter()] public string HandlerFunctions { get; set; }
		[Parameter()] public TestFunctionType? TestFunctionType { get; set; } 
#if NAV2017
		[Parameter()] public TestPermissions? TestPermissions { get;set; }
#endif
		[Parameter()] public TransactionModel? TransactionModel { get; set; }
<# } #>
<# if (functionType == "UpgradeFunction") { #>
#if NAV2015
		[Parameter()] public UpgradeFunctionType? UpgradeFunctionType { get; set; } 
#endif
<# } #>
<# if (functionType == "EventSubscriberFunction") { #>
		[Parameter(Mandatory = true)] public ObjectType EventPublisherObjectType { get; set; } 
		[Parameter(Mandatory = true)] public int EventPublisherObjectID { get; set; } 
		[Parameter()] public string EventPublisherElement { get; set; } 
		[Parameter(Mandatory = true)] public string EventFunction { get; set; } 
		[Parameter()] public MissingAction? OnMissingLicense { get; set; } 
		[Parameter()] public MissingAction? OnMissingPermission { get; set; }
<# } #>
<# if (functionType == "BusinessEventPublisherFunction") { #>
		[Parameter()] public SwitchParameter IncludeSender { get; set; } 
<# } #>
<# if (functionType == "IntegrationEventPublisherFunction") { #>
		[Parameter()] public SwitchParameter IncludeSender { get; set; }
		[Parameter()] public SwitchParameter GlobalVarAccess { get; set; } 
<# } #>

		protected override void AddItemToInputObject(Function item, PSObject inputObject)
		{
			GetFunctions(inputObject).Add(item);	
		}

		protected Functions GetFunctions(PSObject inputObject)
		{
			if (inputObject.BaseObject is Functions)
				return (inputObject.BaseObject as Functions);
			if (inputObject.BaseObject is Code)
				return (inputObject.BaseObject as Code).Functions;
			if (inputObject.BaseObject is Table)
				return (inputObject.BaseObject as Table).Code.Functions;
			if (inputObject.BaseObject is Page)
				return (inputObject.BaseObject as Page).Code.Functions;
			if (inputObject.BaseObject is Report)
				return (inputObject.BaseObject as Report).Code.Functions;
			if (inputObject.BaseObject is Codeunit)
				return (inputObject.BaseObject as Codeunit).Code.Functions;
			if (inputObject.BaseObject is Query)
				return (inputObject.BaseObject as Query).Code.Functions;
			if (inputObject.BaseObject is XmlPort)
				return (inputObject.BaseObject as XmlPort).Code.Functions;

			throw new ApplicationException("Cannot add functions to this type of object.");
		}

		protected override IEnumerable<Function> CreateItems()
		{
			var function = new Function(ID, Name);

			function.Local = Local;
#if NAV2018
			function.FunctionVisibility = FunctionVisibility;
			function.ServiceEnabled = NullableBooleanFromSwitch(nameof(ServiceEnabled));
#endif

#if NAV2016
			function.TryFunction = NullableBooleanFromSwitch(nameof(TryFunction));
#endif
			function.ReturnValue.Name = ReturnValueName;
			function.ReturnValue.Type = ReturnValueType;
			function.ReturnValue.DataLength = ReturnValueDataLength ?? function.ReturnValue.DefaultDataLength;
			function.ReturnValue.Dimensions = ReturnValueDimensions;

<# if (functionType == "TestFunction") { #>
			function.HandlerFunctions = HandlerFunctions;
			function.TestFunctionType = TestFunctionType;
			function.TransactionModel = TransactionModel;
#if NAV2017
			function.TestPermissions = TestPermissions;
#endif
<# } #>
<# if (functionType == "EventSubscriberFunction") { #>
			function.Event = EventPublisherSubscriber.Subscriber;
			function.EventPublisherObject.Type = EventPublisherObjectType;
			function.EventPublisherObject.ID = EventPublisherObjectID;
			function.EventPublisherElement = EventPublisherElement;
			function.EventFunction = EventFunction;
			function.OnMissingLicense = OnMissingLicense;
			function.OnMissingPermission = OnMissingPermission;
<# } #>
<# if (functionType == "IntegrationEventPublisherFunction") { #>
			function.Event = EventPublisherSubscriber.Publisher;
			function.EventType = EventType.Integration;
			function.IncludeSender = NullableBooleanFromSwitch(nameof(IncludeSender));
			function.GlobalVarAccess = NullableBooleanFromSwitch(nameof(GlobalVarAccess));

<# } #>
<# if (functionType == "BusinessEventPublisherFunction") { #>
			function.Event = EventPublisherSubscriber.Publisher;
			function.EventType = EventType.Business;
			function.IncludeSender = NullableBooleanFromSwitch(nameof(IncludeSender));
<# } #>
<# if (functionType == "UpgradeFunction") { #>
#if NAV2015 
			function.UpgradeFunctionType = UpgradeFunctionType;
#endif
<# } #>
			
			if (SubObjects != null)
			{
				var subObjects = SubObjects
					.Invoke()
					.Select(o => o.BaseObject);

				function.Variables.AddRange(subObjects.OfType<Variable>());
				function.Parameters.AddRange(subObjects.OfType<Parameter>());
				function.CodeLines.AddRange(subObjects.OfType<string>());
			}

			yield return function;
		}		
	}
<# if (conditions.ContainsKey(functionType)) { WriteLine("#endif"); } #>

<# } #>
}