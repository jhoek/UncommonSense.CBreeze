<#@ template debug="false" hostspecific="false" language="C#"#>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Management.Automation" #>
<#@ assembly name="$(Core)\UncommonSense.CBreeze.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Management.Automation" #>
<#@ import namespace="UncommonSense.CBreeze.Core" #>
<#@ output extension=".cs" #>
<#
	var types = AppDomain
		.CurrentDomain
		.GetAssemblies()
		.SelectMany(a => a.GetTypes())
		.Where(t => typeof(TableField).IsAssignableFrom(t))
		.Where(t => typeof(TableField) != t);

	var defaultDataLengths = new Dictionary<Type, int>() 
	{
		{ typeof(BinaryTableField), 4 },
		{ typeof(CodeTableField), 10 },
		{ typeof(TextTableField), 30 }
	};
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;
using UncommonSense.CBreeze.Core;
using UncommonSense.CBreeze.Common;
using System.Management.Automation;
using System.Collections.Generic;

namespace UncommonSense.CBreeze.Automation
{
<# foreach(var @type in types) { 
	var variableName = Char.ToLowerInvariant(@type.Name[0]) + @type.Name.Substring(1); 
	var hasDataLength = @type.GetProperty("DataLength") != null; 
	var propertiesClass = @type.GetProperty("Properties").PropertyType;
	var skipProperties = new List<string>() { "Field", "ParentNode", "CaptionML", "OnLookup", "OnValidate", "WithAValue", "ChildNodes", "Item", "TableRelation" }; 

	var allProperties = propertiesClass.GetProperties();
	var relevantProperties = allProperties
		.Where(p => !skipProperties.Contains(p.Name))
		.Select(p=> new { 
			Name = p.Name, 
			Type = p.PropertyType == typeof(bool?) ? typeof(SwitchParameter) : p.PropertyType,
			Mandatory = p.Name == "OptionString",
			Assignment = string.Format("{0}.Properties.{1}{2};", variableName, p.Name, GetAssignment(p))
        });

	if (relevantProperties.Any(p => p.Name == "DecimalPlaces"))
	{
		var newProperties = new[] {
			new{ 
				Name = "DecimalPlacesAtLeast", 
				Type = typeof(int?),
				Mandatory = false,
				Assignment = string.Format("{0}.Properties.DecimalPlaces.AtLeast = DecimalPlacesAtLeast;", variableName)
			},
			new {
				Name = "DecimalPlacesAtMost", 
				Type = typeof(int?),
				Mandatory = false,
				Assignment = string.Format("{0}.Properties.DecimalPlaces.AtMost = DecimalPlacesAtMost;", variableName)
			}
		};

		relevantProperties = relevantProperties
			.Where(p => p.Name != "DecimalPlaces")
			.Concat(newProperties);
	}

	relevantProperties = relevantProperties.OrderBy(p => p.Name);

	if (relevantProperties.Any(p => p.Name == "OptionCaptionML"))
	{
		var crLf = Environment.NewLine;

		var newProperties = new [] {
			new {
				Name = "OptionCaptionML",
				Type = typeof(Hashtable),
				Mandatory = false,
				Assignment = string.Format("{0}.Properties.OptionCaptionML.Set(OptionCaptionML);", variableName)
			},
			new {
				Name = "AutoOptionCaption",
				Type = typeof(SwitchParameter),
				Mandatory = false,
				Assignment = string.Format("{0}			if (AutoOptionCaption) {0}				{1}.AutoOptionCaption();", crLf, variableName)
			}
		};

		relevantProperties = relevantProperties
			.Where(p => p.Name != "OptionCaptionML")
			.Concat(newProperties);
	}

	if (relevantProperties.Any(p => p.Name == "AccessByPermission"))
	{
		var newProperties = new[] {
			new {
				Name = "AccessByPermission",
				// Cannot use Type= typeof(AccessByPermission) in pre-2015 code...
				Type = AppDomain.CurrentDomain.GetAssemblies().SelectMany(a=>a.GetTypes()).Single(t => t.FullName == "UncommonSense.CBreeze.Core.AccessByPermission"),				
				Mandatory = false,
				Assignment = string.Format("{0}.Properties.AccessByPermission.Set(AccessByPermission);", variableName)
			}
		};

		relevantProperties = relevantProperties
			.Where(p => p.Name != "AccessByPermission")
			.Concat(newProperties);
	}
#>
	[Cmdlet(VerbsCommon.New, "CBreeze<#=@type.Name#>", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(<#=type.Name#>))]
	[Alias("<#=@type.Name.Replace("Table", "")#>", "Add-CBreeze<#=@type.Name#>")]
	public class NewCBreeze<#=@type.Name#> : NewItemWithIDAndNameCmdlet<<#=@type.Name#>, int, Table>
	{

<# if (hasDataLength) { #>
		[Parameter()]
		[ValidateRange(1, 250)]
		public int? DataLength { get; set; } 	
<# } #>

		protected override IEnumerable<<#=@type.Name#>> CreateItems()
		{
			var <#=variableName#> = new <#=@type.Name#>(ID, Name<#if (hasDataLength) {#>, DataLength ?? <#=defaultDataLengths[@type]#><# } #>);
			<#=variableName#>.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			<#=variableName#>.Properties.CaptionML.Set(CaptionML);
            <#=variableName#>.Properties.Description = Description;

<# foreach(var property in relevantProperties) { #>
			<#=property.Assignment#>
<# } #>

			<#=variableName#>.Properties.OnValidate.Set(OnValidate);
			<#=variableName#>.Properties.OnLookup.Set(OnLookup);

<# if (allProperties.Any(p => p.Name == "TableRelation")) { #>
			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				<#=variableName#>.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}
<# } #>

			if (AutoCaption)
                <#=variableName#>.AutoCaption();

			yield return <#=variableName#>;
		}

        protected override void AddItemToInputObject(<#= @type.Name #> item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

<# foreach(var property in relevantProperties) { #>
	[Parameter(<# if (property.Mandatory) { #>Mandatory=true<# } #>)]
	public <#=GetFullTypeName(property.Type)#> <#=property.Name#> { get;set; }

<# } #>

		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

<# if (allProperties.Any(p => p.Name == "TableRelation")) { #>
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
<# } #>
	}

<# } #>
}
<#+
	static string GetFullTypeName(Type t)
	{
		if (!t.IsGenericType)
			return t.Name;

		var stringBuilder = new StringBuilder();

		stringBuilder.Append(t.Name.Substring(0, t.Name.LastIndexOf("`")));
		stringBuilder.Append("<");
		stringBuilder.Append(string.Join(",", t.GetGenericArguments().Select(a => GetFullTypeName(a))));
		stringBuilder.Append(">");

		return stringBuilder.ToString();
	}

	static string GetAssignment(PropertyInfo propertyInfo)
	{
		switch(propertyInfo)
		{
			case PropertyInfo p when p.Name == "CalcFormula": return $".Set({p.Name})";
			case PropertyInfo p when p.PropertyType == typeof(bool?): return $" = NullableBooleanFromSwitch(nameof({p.Name}))";
			default: return $" = {propertyInfo.Name}";
		}
	}
#>