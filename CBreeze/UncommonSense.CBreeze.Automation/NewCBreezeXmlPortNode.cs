//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;
using System.Management.Automation;
using UncommonSense.CBreeze.Common;
using UncommonSense.CBreeze.Core;
using UncommonSense.CBreeze.Core.Property.Enumeration;
using UncommonSense.CBreeze.Core.Property.Implementation;
using UncommonSense.CBreeze.Core.Property.Type;
using UncommonSense.CBreeze.Core.Table.Field;
using UncommonSense.CBreeze.Core.XmlPort;

namespace UncommonSense.CBreeze.Automation 
{
	[Cmdlet(VerbsCommon.New, "CBreezeXmlPortFieldAttribute", DefaultParameterSetName=ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(XmlPortNode))]
	[Alias("FieldAttribute")]
	public class NewCBreezeXmlPortFieldAttribute : NewItemWithIDAndNameCmdlet<XmlPortNode, Guid, PSObject>
	{
		protected override IEnumerable<XmlPortNode> CreateItems()
		{
			var xmlPortFieldAttribute = new XmlPortFieldAttribute(Name, GetIndentation(), ID);

			xmlPortFieldAttribute.Properties.AutoCalcField = NullableBooleanFromSwitch(nameof(AutoCalcField));
			xmlPortFieldAttribute.Properties.DataType = DataType;
			xmlPortFieldAttribute.Properties.FieldValidate = NullableBooleanFromSwitch(nameof(FieldValidate));
			xmlPortFieldAttribute.Properties.Occurrence = Occurrence;
			xmlPortFieldAttribute.Properties.OnAfterAssignField.Set(OnAfterAssignField);
			xmlPortFieldAttribute.Properties.OnBeforePassField.Set(OnBeforePassField);
			xmlPortFieldAttribute.Properties.SourceField.FieldName = SourceFieldName;
			xmlPortFieldAttribute.Properties.SourceField.TableVariableName = SourceFieldTableVariableName;
			xmlPortFieldAttribute.Properties.Width = Width;

			yield return xmlPortFieldAttribute;

			if (ChildNodes != null)
			{
                var variables = new List<PSVariable>() { new PSVariable("NodeIndentation", GetIndentation() + 1) };
				var childNodes = ChildNodes.InvokeWithContext(null, variables).Select(c => c.BaseObject);

				
				foreach(var childNode in childNodes.OfType<XmlPortNode>())
				{
					yield return childNode;
				}
			}
		}

		protected override void AddItemToInputObject(XmlPortNode item, PSObject inputObject)
		{
			switch(inputObject.BaseObject)
			{
				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Insert(0, item); 
					break;

				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Add(item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Insert(0, item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Add(item); 
					break;

				case XmlPortNode n:
					(InputObject.BaseObject as XmlPortNode).AddChildNode(item, Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer));
					break;

				default:
					base.AddItemToInputObject(item, inputObject);
					break;
			}
		}

		protected int GetIndentation()
		{
			switch(ParameterSetName)
			{
				case ParameterSetNames.AddWithID:
				case ParameterSetNames.AddWithoutID:
					if (InputObject.BaseObject is XmlPort) { return 0; }
					if (InputObject.BaseObject is XmlPortNodes) { return 0; } 
					if (InputObject.BaseObject is XmlPortNode) { return (InputObject.BaseObject as XmlPortNode).IndentationLevel.GetValueOrDefault(0) + 1; };
	                throw new ArgumentOutOfRangeException("Cannot determine indentation.");
					
				case ParameterSetNames.NewWithID:
				case ParameterSetNames.NewWithoutID:
					return (int)GetVariableValue("NodeIndentation", 0);

				default: 
					return 0;
			}
		}

		[Parameter()]
		public Position? Position { get; set; }
		
		[Parameter()]
		public SwitchParameter AutoCalcField { get; set; }

		[Parameter()]
		public Nullable<XmlPortNodeDataType> DataType { get; set; }

		[Parameter()]
		public SwitchParameter FieldValidate { get; set; }

		[Parameter()]
		public Nullable<Occurrence> Occurrence { get; set; }

		[Parameter()]
		public ScriptBlock OnAfterAssignField { get; set; }

		[Parameter()]
		public ScriptBlock OnBeforePassField { get; set; }

		[Parameter(Mandatory = true, Position = 3, ParameterSetName=ParameterSetNames.NewWithoutID)]
		[Parameter(Mandatory = true, Position = 4, ParameterSetName=ParameterSetNames.NewWithID)]
		[Parameter(Mandatory = true, Position = 3, ParameterSetName=ParameterSetNames.AddWithoutID)]
		[Parameter(Mandatory = true, Position = 4, ParameterSetName=ParameterSetNames.AddWithID)]		
		public string SourceFieldName { get; set; }

		[Parameter(Mandatory = true, Position = 2, ParameterSetName=ParameterSetNames.NewWithoutID)]
		[Parameter(Mandatory = true, Position = 3, ParameterSetName=ParameterSetNames.NewWithID)]
		[Parameter(Mandatory = true, Position = 2, ParameterSetName=ParameterSetNames.AddWithoutID)]
		[Parameter(Mandatory = true, Position = 3, ParameterSetName=ParameterSetNames.AddWithID)]		
		public string SourceFieldTableVariableName { get; set; }

		[Parameter()]
		public Nullable<Int32> Width { get; set; }

        [Parameter(Position = 4, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 4, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 5, ParameterSetName = ParameterSetNames.AddWithID)]
        [Parameter(Position = 5, ParameterSetName = ParameterSetNames.NewWithID)]
		public ScriptBlock ChildNodes { get; set; }
	}

	[Cmdlet(VerbsCommon.New, "CBreezeXmlPortFieldElement", DefaultParameterSetName=ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(XmlPortNode))]
	[Alias("FieldElement")]
	public class NewCBreezeXmlPortFieldElement : NewItemWithIDAndNameCmdlet<XmlPortNode, Guid, PSObject>
	{
		protected override IEnumerable<XmlPortNode> CreateItems()
		{
			var xmlPortFieldElement = new XmlPortFieldElement(Name, GetIndentation(), ID);

			xmlPortFieldElement.Properties.AutoCalcField = NullableBooleanFromSwitch(nameof(AutoCalcField));
			xmlPortFieldElement.Properties.DataType = DataType;
			xmlPortFieldElement.Properties.FieldValidate = NullableBooleanFromSwitch(nameof(FieldValidate));
			xmlPortFieldElement.Properties.MaxOccurs = MaxOccurs;
			xmlPortFieldElement.Properties.MinOccurs = MinOccurs;
			xmlPortFieldElement.Properties.NamespacePrefix = NamespacePrefix;
			xmlPortFieldElement.Properties.OnAfterAssignField.Set(OnAfterAssignField);
			xmlPortFieldElement.Properties.OnBeforePassField.Set(OnBeforePassField);
			xmlPortFieldElement.Properties.SourceField.FieldName = SourceFieldName;
			xmlPortFieldElement.Properties.SourceField.TableVariableName = SourceFieldTableVariableName;
			xmlPortFieldElement.Properties.Unbound = NullableBooleanFromSwitch(nameof(Unbound));
			xmlPortFieldElement.Properties.Width = Width;

			yield return xmlPortFieldElement;

			if (ChildNodes != null)
			{
                var variables = new List<PSVariable>() { new PSVariable("NodeIndentation", GetIndentation() + 1) };
				var childNodes = ChildNodes.InvokeWithContext(null, variables).Select(c => c.BaseObject);

				
				foreach(var childNode in childNodes.OfType<XmlPortNode>())
				{
					yield return childNode;
				}
			}
		}

		protected override void AddItemToInputObject(XmlPortNode item, PSObject inputObject)
		{
			switch(inputObject.BaseObject)
			{
				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Insert(0, item); 
					break;

				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Add(item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Insert(0, item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Add(item); 
					break;

				case XmlPortNode n:
					(InputObject.BaseObject as XmlPortNode).AddChildNode(item, Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer));
					break;

				default:
					base.AddItemToInputObject(item, inputObject);
					break;
			}
		}

		protected int GetIndentation()
		{
			switch(ParameterSetName)
			{
				case ParameterSetNames.AddWithID:
				case ParameterSetNames.AddWithoutID:
					if (InputObject.BaseObject is XmlPort) { return 0; }
					if (InputObject.BaseObject is XmlPortNodes) { return 0; } 
					if (InputObject.BaseObject is XmlPortNode) { return (InputObject.BaseObject as XmlPortNode).IndentationLevel.GetValueOrDefault(0) + 1; };
	                throw new ArgumentOutOfRangeException("Cannot determine indentation.");
					
				case ParameterSetNames.NewWithID:
				case ParameterSetNames.NewWithoutID:
					return (int)GetVariableValue("NodeIndentation", 0);

				default: 
					return 0;
			}
		}

		[Parameter()]
		public Position? Position { get; set; }
		
		[Parameter()]
		public SwitchParameter AutoCalcField { get; set; }

		[Parameter()]
		public Nullable<XmlPortNodeDataType> DataType { get; set; }

		[Parameter()]
		public SwitchParameter FieldValidate { get; set; }

		[Parameter()]
		public Nullable<MaxOccurs> MaxOccurs { get; set; }

		[Parameter()]
		public Nullable<MinOccurs> MinOccurs { get; set; }

		[Parameter()]
		public String NamespacePrefix { get; set; }

		[Parameter()]
		public ScriptBlock OnAfterAssignField { get; set; }

		[Parameter()]
		public ScriptBlock OnBeforePassField { get; set; }

		[Parameter(Mandatory = true, Position = 3, ParameterSetName=ParameterSetNames.NewWithoutID)]
		[Parameter(Mandatory = true, Position = 4, ParameterSetName=ParameterSetNames.NewWithID)]
		[Parameter(Mandatory = true, Position = 3, ParameterSetName=ParameterSetNames.AddWithoutID)]
		[Parameter(Mandatory = true, Position = 4, ParameterSetName=ParameterSetNames.AddWithID)]		
		public string SourceFieldName { get; set; }

		[Parameter(Mandatory = true, Position = 2, ParameterSetName=ParameterSetNames.NewWithoutID)]
		[Parameter(Mandatory = true, Position = 3, ParameterSetName=ParameterSetNames.NewWithID)]
		[Parameter(Mandatory = true, Position = 2, ParameterSetName=ParameterSetNames.AddWithoutID)]
		[Parameter(Mandatory = true, Position = 3, ParameterSetName=ParameterSetNames.AddWithID)]		
		public string SourceFieldTableVariableName { get; set; }

		[Parameter()]
		public SwitchParameter Unbound { get; set; }

		[Parameter()]
		public Nullable<Int32> Width { get; set; }

        [Parameter(Position = 4, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 4, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 5, ParameterSetName = ParameterSetNames.AddWithID)]
        [Parameter(Position = 5, ParameterSetName = ParameterSetNames.NewWithID)]
		public ScriptBlock ChildNodes { get; set; }
	}

	[Cmdlet(VerbsCommon.New, "CBreezeXmlPortTableAttribute", DefaultParameterSetName=ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(XmlPortNode))]
	[Alias("TableAttribute")]
	public class NewCBreezeXmlPortTableAttribute : NewItemWithIDAndNameCmdlet<XmlPortNode, Guid, PSObject>
	{
		protected override IEnumerable<XmlPortNode> CreateItems()
		{
			var xmlPortTableAttribute = new XmlPortTableAttribute(Name, GetIndentation(), ID);

			xmlPortTableAttribute.Properties.AutoReplace = NullableBooleanFromSwitch(nameof(AutoReplace));
			xmlPortTableAttribute.Properties.AutoSave = NullableBooleanFromSwitch(nameof(AutoSave));
			xmlPortTableAttribute.Properties.AutoUpdate = NullableBooleanFromSwitch(nameof(AutoUpdate));
			xmlPortTableAttribute.Properties.CalcFields.AddRange(CalcFields);
			xmlPortTableAttribute.Properties.LinkTable = LinkTable;
			xmlPortTableAttribute.Properties.LinkTableForceInsert = NullableBooleanFromSwitch(nameof(LinkTableForceInsert));
			xmlPortTableAttribute.Properties.Occurrence = Occurrence;
			xmlPortTableAttribute.Properties.OnAfterGetRecord.Set(OnAfterGetRecord);
			xmlPortTableAttribute.Properties.OnAfterInitRecord.Set(OnAfterInitRecord);
			xmlPortTableAttribute.Properties.OnAfterInsertRecord.Set(OnAfterInsertRecord);
			xmlPortTableAttribute.Properties.OnAfterModifyRecord.Set(OnAfterModifyRecord);
			xmlPortTableAttribute.Properties.OnBeforeInsertRecord.Set(OnBeforeInsertRecord);
			xmlPortTableAttribute.Properties.OnBeforeModifyRecord.Set(OnBeforeModifyRecord);
			xmlPortTableAttribute.Properties.OnPreXmlItem.Set(OnPreXmlItem);
			xmlPortTableAttribute.Properties.ReqFilterFields.AddRange(ReqFilterFields);
			xmlPortTableAttribute.Properties.SourceTable = SourceTable;
			xmlPortTableAttribute.Properties.SourceTableView.Key = SourceTableViewKey;
			xmlPortTableAttribute.Properties.SourceTableView.Order = SourceTableViewOrder;
			xmlPortTableAttribute.Properties.Temporary = NullableBooleanFromSwitch(nameof(Temporary));
			xmlPortTableAttribute.Properties.VariableName = VariableName;
			xmlPortTableAttribute.Properties.Width = Width;

			yield return xmlPortTableAttribute;

			if (ChildNodes != null)
			{
                var variables = new List<PSVariable>() { new PSVariable("NodeIndentation", GetIndentation() + 1) };
				var childNodes = ChildNodes.InvokeWithContext(null, variables).Select(c => c.BaseObject);

				xmlPortTableAttribute.Properties.LinkFields.AddRange(childNodes.OfType<LinkField>());				
				xmlPortTableAttribute.Properties.SourceTableView.TableFilter.AddRange(childNodes.OfType<TableFilterLine>());				

				
				foreach(var childNode in childNodes.OfType<XmlPortNode>())
				{
					yield return childNode;
				}
			}
		}

		protected override void AddItemToInputObject(XmlPortNode item, PSObject inputObject)
		{
			switch(inputObject.BaseObject)
			{
				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Insert(0, item); 
					break;

				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Add(item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Insert(0, item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Add(item); 
					break;

				case XmlPortNode n:
					(InputObject.BaseObject as XmlPortNode).AddChildNode(item, Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer));
					break;

				default:
					base.AddItemToInputObject(item, inputObject);
					break;
			}
		}

		protected int GetIndentation()
		{
			switch(ParameterSetName)
			{
				case ParameterSetNames.AddWithID:
				case ParameterSetNames.AddWithoutID:
					if (InputObject.BaseObject is XmlPort) { return 0; }
					if (InputObject.BaseObject is XmlPortNodes) { return 0; } 
					if (InputObject.BaseObject is XmlPortNode) { return (InputObject.BaseObject as XmlPortNode).IndentationLevel.GetValueOrDefault(0) + 1; };
	                throw new ArgumentOutOfRangeException("Cannot determine indentation.");
					
				case ParameterSetNames.NewWithID:
				case ParameterSetNames.NewWithoutID:
					return (int)GetVariableValue("NodeIndentation", 0);

				default: 
					return 0;
			}
		}

		[Parameter()]
		public Position? Position { get; set; }
		
		[Parameter()]
		public SwitchParameter AutoReplace { get; set; }

		[Parameter()]
		public SwitchParameter AutoSave { get; set; }

		[Parameter()]
		public SwitchParameter AutoUpdate { get; set; }

		[Parameter()]
		public string[] CalcFields { get; set; }

		[Parameter()]
		public String LinkTable { get; set; }

		[Parameter()]
		public SwitchParameter LinkTableForceInsert { get; set; }

		[Parameter()]
		public Nullable<Occurrence> Occurrence { get; set; }

		[Parameter()]
		public ScriptBlock OnAfterGetRecord { get; set; }

		[Parameter()]
		public ScriptBlock OnAfterInitRecord { get; set; }

		[Parameter()]
		public ScriptBlock OnAfterInsertRecord { get; set; }

		[Parameter()]
		public ScriptBlock OnAfterModifyRecord { get; set; }

		[Parameter()]
		public ScriptBlock OnBeforeInsertRecord { get; set; }

		[Parameter()]
		public ScriptBlock OnBeforeModifyRecord { get; set; }

		[Parameter()]
		public ScriptBlock OnPreXmlItem { get; set; }

		[Parameter()]
		public string[] ReqFilterFields { get; set; }

		[Parameter(Mandatory = true, Position = 2, ParameterSetName=ParameterSetNames.NewWithoutID)]
		[Parameter(Mandatory = true, Position = 3, ParameterSetName=ParameterSetNames.NewWithID)]
		[Parameter(Mandatory = true, Position = 2, ParameterSetName=ParameterSetNames.AddWithoutID)]
		[Parameter(Mandatory = true, Position = 3, ParameterSetName=ParameterSetNames.AddWithID)]		
		[ValidateRange(1, int.MaxValue)]
		public Nullable<Int32> SourceTable { get; set; }

		[Parameter()]
		public string SourceTableViewKey { get; set; }

		[Parameter()]
		public Order? SourceTableViewOrder { get; set; }

		[Parameter()]
		public SwitchParameter Temporary { get; set; }

		[Parameter()]
		public String VariableName { get; set; }

		[Parameter()]
		public Nullable<Int32> Width { get; set; }

        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 4, ParameterSetName = ParameterSetNames.AddWithID)]
        [Parameter(Position = 4, ParameterSetName = ParameterSetNames.NewWithID)]
		public ScriptBlock ChildNodes { get; set; }
	}

	[Cmdlet(VerbsCommon.New, "CBreezeXmlPortTableElement", DefaultParameterSetName=ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(XmlPortNode))]
	[Alias("TableElement")]
	public class NewCBreezeXmlPortTableElement : NewItemWithIDAndNameCmdlet<XmlPortNode, Guid, PSObject>
	{
		protected override IEnumerable<XmlPortNode> CreateItems()
		{
			var xmlPortTableElement = new XmlPortTableElement(Name, GetIndentation(), ID);

			xmlPortTableElement.Properties.AutoReplace = NullableBooleanFromSwitch(nameof(AutoReplace));
			xmlPortTableElement.Properties.AutoSave = NullableBooleanFromSwitch(nameof(AutoSave));
			xmlPortTableElement.Properties.AutoUpdate = NullableBooleanFromSwitch(nameof(AutoUpdate));
			xmlPortTableElement.Properties.CalcFields.AddRange(CalcFields);
			xmlPortTableElement.Properties.LinkTable = LinkTable;
			xmlPortTableElement.Properties.LinkTableForceInsert = NullableBooleanFromSwitch(nameof(LinkTableForceInsert));
			xmlPortTableElement.Properties.MaxOccurs = MaxOccurs;
			xmlPortTableElement.Properties.MinOccurs = MinOccurs;
			xmlPortTableElement.Properties.NamespacePrefix = NamespacePrefix;
			xmlPortTableElement.Properties.OnAfterGetRecord.Set(OnAfterGetRecord);
			xmlPortTableElement.Properties.OnAfterInitRecord.Set(OnAfterInitRecord);
			xmlPortTableElement.Properties.OnAfterInsertRecord.Set(OnAfterInsertRecord);
			xmlPortTableElement.Properties.OnAfterModifyRecord.Set(OnAfterModifyRecord);
			xmlPortTableElement.Properties.OnBeforeInsertRecord.Set(OnBeforeInsertRecord);
			xmlPortTableElement.Properties.OnBeforeModifyRecord.Set(OnBeforeModifyRecord);
			xmlPortTableElement.Properties.OnPreXMLItem.Set(OnPreXMLItem);
			xmlPortTableElement.Properties.ReqFilterFields.AddRange(ReqFilterFields);
			xmlPortTableElement.Properties.SourceTable = SourceTable;
			xmlPortTableElement.Properties.SourceTableView.Key = SourceTableViewKey;
			xmlPortTableElement.Properties.SourceTableView.Order = SourceTableViewOrder;
			xmlPortTableElement.Properties.Temporary = NullableBooleanFromSwitch(nameof(Temporary));
			xmlPortTableElement.Properties.VariableName = VariableName;
			xmlPortTableElement.Properties.Width = Width;

			yield return xmlPortTableElement;

			if (ChildNodes != null)
			{
                var variables = new List<PSVariable>() { new PSVariable("NodeIndentation", GetIndentation() + 1) };
				var childNodes = ChildNodes.InvokeWithContext(null, variables).Select(c => c.BaseObject);

				xmlPortTableElement.Properties.LinkFields.AddRange(childNodes.OfType<LinkField>());				
				xmlPortTableElement.Properties.SourceTableView.TableFilter.AddRange(childNodes.OfType<TableFilterLine>());				

				
				foreach(var childNode in childNodes.OfType<XmlPortNode>())
				{
					yield return childNode;
				}
			}
		}

		protected override void AddItemToInputObject(XmlPortNode item, PSObject inputObject)
		{
			switch(inputObject.BaseObject)
			{
				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Insert(0, item); 
					break;

				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Add(item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Insert(0, item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Add(item); 
					break;

				case XmlPortNode n:
					(InputObject.BaseObject as XmlPortNode).AddChildNode(item, Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer));
					break;

				default:
					base.AddItemToInputObject(item, inputObject);
					break;
			}
		}

		protected int GetIndentation()
		{
			switch(ParameterSetName)
			{
				case ParameterSetNames.AddWithID:
				case ParameterSetNames.AddWithoutID:
					if (InputObject.BaseObject is XmlPort) { return 0; }
					if (InputObject.BaseObject is XmlPortNodes) { return 0; } 
					if (InputObject.BaseObject is XmlPortNode) { return (InputObject.BaseObject as XmlPortNode).IndentationLevel.GetValueOrDefault(0) + 1; };
	                throw new ArgumentOutOfRangeException("Cannot determine indentation.");
					
				case ParameterSetNames.NewWithID:
				case ParameterSetNames.NewWithoutID:
					return (int)GetVariableValue("NodeIndentation", 0);

				default: 
					return 0;
			}
		}

		[Parameter()]
		public Position? Position { get; set; }
		
		[Parameter()]
		public SwitchParameter AutoReplace { get; set; }

		[Parameter()]
		public SwitchParameter AutoSave { get; set; }

		[Parameter()]
		public SwitchParameter AutoUpdate { get; set; }

		[Parameter()]
		public string[] CalcFields { get; set; }

		[Parameter()]
		public String LinkTable { get; set; }

		[Parameter()]
		public SwitchParameter LinkTableForceInsert { get; set; }

		[Parameter()]
		public Nullable<MaxOccurs> MaxOccurs { get; set; }

		[Parameter()]
		public Nullable<MinOccurs> MinOccurs { get; set; }

		[Parameter()]
		public String NamespacePrefix { get; set; }

		[Parameter()]
		public ScriptBlock OnAfterGetRecord { get; set; }

		[Parameter()]
		public ScriptBlock OnAfterInitRecord { get; set; }

		[Parameter()]
		public ScriptBlock OnAfterInsertRecord { get; set; }

		[Parameter()]
		public ScriptBlock OnAfterModifyRecord { get; set; }

		[Parameter()]
		public ScriptBlock OnBeforeInsertRecord { get; set; }

		[Parameter()]
		public ScriptBlock OnBeforeModifyRecord { get; set; }

		[Parameter()]
		public ScriptBlock OnPreXMLItem { get; set; }

		[Parameter()]
		public string[] ReqFilterFields { get; set; }

		[Parameter(Mandatory = true, Position = 2, ParameterSetName=ParameterSetNames.NewWithoutID)]
		[Parameter(Mandatory = true, Position = 3, ParameterSetName=ParameterSetNames.NewWithID)]
		[Parameter(Mandatory = true, Position = 2, ParameterSetName=ParameterSetNames.AddWithoutID)]
		[Parameter(Mandatory = true, Position = 3, ParameterSetName=ParameterSetNames.AddWithID)]		
		[ValidateRange(1, int.MaxValue)]
		public Nullable<Int32> SourceTable { get; set; }

		[Parameter()]
		public string SourceTableViewKey { get; set; }

		[Parameter()]
		public Order? SourceTableViewOrder { get; set; }

		[Parameter()]
		public SwitchParameter Temporary { get; set; }

		[Parameter()]
		public String VariableName { get; set; }

		[Parameter()]
		public Nullable<Int32> Width { get; set; }

        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 4, ParameterSetName = ParameterSetNames.AddWithID)]
        [Parameter(Position = 4, ParameterSetName = ParameterSetNames.NewWithID)]
		public ScriptBlock ChildNodes { get; set; }
	}

	[Cmdlet(VerbsCommon.New, "CBreezeXmlPortTextAttribute", DefaultParameterSetName=ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(XmlPortNode))]
	[Alias("TextAttribute")]
	public class NewCBreezeXmlPortTextAttribute : NewItemWithIDAndNameCmdlet<XmlPortNode, Guid, PSObject>
	{
		protected override IEnumerable<XmlPortNode> CreateItems()
		{
			var xmlPortTextAttribute = new XmlPortTextAttribute(Name, GetIndentation(), ID);

			xmlPortTextAttribute.Properties.DataType = DataType;
			xmlPortTextAttribute.Properties.Occurrence = Occurrence;
			xmlPortTextAttribute.Properties.OnAfterAssignVariable.Set(OnAfterAssignVariable);
			xmlPortTextAttribute.Properties.OnBeforePassVariable.Set(OnBeforePassVariable);
			xmlPortTextAttribute.Properties.TextType = TextType;
			xmlPortTextAttribute.Properties.VariableName = VariableName;
			xmlPortTextAttribute.Properties.Width = Width;

			yield return xmlPortTextAttribute;

			if (ChildNodes != null)
			{
                var variables = new List<PSVariable>() { new PSVariable("NodeIndentation", GetIndentation() + 1) };
				var childNodes = ChildNodes.InvokeWithContext(null, variables).Select(c => c.BaseObject);

				
				foreach(var childNode in childNodes.OfType<XmlPortNode>())
				{
					yield return childNode;
				}
			}
		}

		protected override void AddItemToInputObject(XmlPortNode item, PSObject inputObject)
		{
			switch(inputObject.BaseObject)
			{
				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Insert(0, item); 
					break;

				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Add(item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Insert(0, item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Add(item); 
					break;

				case XmlPortNode n:
					(InputObject.BaseObject as XmlPortNode).AddChildNode(item, Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer));
					break;

				default:
					base.AddItemToInputObject(item, inputObject);
					break;
			}
		}

		protected int GetIndentation()
		{
			switch(ParameterSetName)
			{
				case ParameterSetNames.AddWithID:
				case ParameterSetNames.AddWithoutID:
					if (InputObject.BaseObject is XmlPort) { return 0; }
					if (InputObject.BaseObject is XmlPortNodes) { return 0; } 
					if (InputObject.BaseObject is XmlPortNode) { return (InputObject.BaseObject as XmlPortNode).IndentationLevel.GetValueOrDefault(0) + 1; };
	                throw new ArgumentOutOfRangeException("Cannot determine indentation.");
					
				case ParameterSetNames.NewWithID:
				case ParameterSetNames.NewWithoutID:
					return (int)GetVariableValue("NodeIndentation", 0);

				default: 
					return 0;
			}
		}

		[Parameter()]
		public Position? Position { get; set; }
		
		[Parameter()]
		public Nullable<XmlPortNodeDataType> DataType { get; set; }

		[Parameter()]
		public Nullable<Occurrence> Occurrence { get; set; }

		[Parameter()]
		public ScriptBlock OnAfterAssignVariable { get; set; }

		[Parameter()]
		public ScriptBlock OnBeforePassVariable { get; set; }

		[Parameter()]
		public Nullable<TextType> TextType { get; set; }

		[Parameter()]
		public String VariableName { get; set; }

		[Parameter()]
		public Nullable<Int32> Width { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
		public ScriptBlock ChildNodes { get; set; }
	}

	[Cmdlet(VerbsCommon.New, "CBreezeXmlPortTextElement", DefaultParameterSetName=ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(XmlPortNode))]
	[Alias("TextElement")]
	public class NewCBreezeXmlPortTextElement : NewItemWithIDAndNameCmdlet<XmlPortNode, Guid, PSObject>
	{
		protected override IEnumerable<XmlPortNode> CreateItems()
		{
			var xmlPortTextElement = new XmlPortTextElement(Name, GetIndentation(), ID);

			xmlPortTextElement.Properties.DataType = DataType;
			xmlPortTextElement.Properties.MaxOccurs = MaxOccurs;
			xmlPortTextElement.Properties.MinOccurs = MinOccurs;
			xmlPortTextElement.Properties.NamespacePrefix = NamespacePrefix;
			xmlPortTextElement.Properties.OnAfterAssignVariable.Set(OnAfterAssignVariable);
			xmlPortTextElement.Properties.OnBeforePassVariable.Set(OnBeforePassVariable);
			xmlPortTextElement.Properties.TextType = TextType;
			xmlPortTextElement.Properties.Unbound = NullableBooleanFromSwitch(nameof(Unbound));
			xmlPortTextElement.Properties.VariableName = VariableName;
			xmlPortTextElement.Properties.Width = Width;

			yield return xmlPortTextElement;

			if (ChildNodes != null)
			{
                var variables = new List<PSVariable>() { new PSVariable("NodeIndentation", GetIndentation() + 1) };
				var childNodes = ChildNodes.InvokeWithContext(null, variables).Select(c => c.BaseObject);

				
				foreach(var childNode in childNodes.OfType<XmlPortNode>())
				{
					yield return childNode;
				}
			}
		}

		protected override void AddItemToInputObject(XmlPortNode item, PSObject inputObject)
		{
			switch(inputObject.BaseObject)
			{
				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Insert(0, item); 
					break;

				case XmlPort x when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPort).Nodes.Add(item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.FirstWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Insert(0, item); 
					break;

				case XmlPortNodes n when Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer) == Core.Property.Enumeration.Position.LastWithinContainer:
					(InputObject.BaseObject as XmlPortNodes).Add(item); 
					break;

				case XmlPortNode n:
					(InputObject.BaseObject as XmlPortNode).AddChildNode(item, Position.GetValueOrDefault(Core.Property.Enumeration.Position.LastWithinContainer));
					break;

				default:
					base.AddItemToInputObject(item, inputObject);
					break;
			}
		}

		protected int GetIndentation()
		{
			switch(ParameterSetName)
			{
				case ParameterSetNames.AddWithID:
				case ParameterSetNames.AddWithoutID:
					if (InputObject.BaseObject is XmlPort) { return 0; }
					if (InputObject.BaseObject is XmlPortNodes) { return 0; } 
					if (InputObject.BaseObject is XmlPortNode) { return (InputObject.BaseObject as XmlPortNode).IndentationLevel.GetValueOrDefault(0) + 1; };
	                throw new ArgumentOutOfRangeException("Cannot determine indentation.");
					
				case ParameterSetNames.NewWithID:
				case ParameterSetNames.NewWithoutID:
					return (int)GetVariableValue("NodeIndentation", 0);

				default: 
					return 0;
			}
		}

		[Parameter()]
		public Position? Position { get; set; }
		
		[Parameter()]
		public Nullable<XmlPortNodeDataType> DataType { get; set; }

		[Parameter()]
		public Nullable<MaxOccurs> MaxOccurs { get; set; }

		[Parameter()]
		public Nullable<MinOccurs> MinOccurs { get; set; }

		[Parameter()]
		public String NamespacePrefix { get; set; }

		[Parameter()]
		public ScriptBlock OnAfterAssignVariable { get; set; }

		[Parameter()]
		public ScriptBlock OnBeforePassVariable { get; set; }

		[Parameter()]
		public Nullable<TextType> TextType { get; set; }

		[Parameter()]
		public SwitchParameter Unbound { get; set; }

		[Parameter()]
		public String VariableName { get; set; }

		[Parameter()]
		public Nullable<Int32> Width { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
		public ScriptBlock ChildNodes { get; set; }
	}

}
