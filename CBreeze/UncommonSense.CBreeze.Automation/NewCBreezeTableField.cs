//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;
using UncommonSense.CBreeze.Core;
using UncommonSense.CBreeze.Common;
using System.Management.Automation;
using System.Collections.Generic;

namespace UncommonSense.CBreeze.Automation
{
	[Cmdlet(VerbsCommon.New, "CBreezeBigIntegerTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(BigIntegerTableField))]
	[Alias("BigIntegerField", "Add-CBreezeBigIntegerTableField")]
	public class NewCBreezeBigIntegerTableField : NewItemWithIDAndNameCmdlet<BigIntegerTableField, int, Table>
	{


		protected override IEnumerable<BigIntegerTableField> CreateItems()
		{
			var bigIntegerTableField = new BigIntegerTableField(ID, Name);
			bigIntegerTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			bigIntegerTableField.Properties.CaptionML.Set(CaptionML);
            bigIntegerTableField.Properties.Description = Description;

			bigIntegerTableField.Properties.AltSearchField = AltSearchField;
			bigIntegerTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			bigIntegerTableField.Properties.AutoFormatType = AutoFormatType;
			bigIntegerTableField.Properties.AutoIncrement = NullableBooleanFromSwitch(nameof(AutoIncrement));
			bigIntegerTableField.Properties.BlankNumbers = BlankNumbers;
			bigIntegerTableField.Properties.BlankZero = NullableBooleanFromSwitch(nameof(BlankZero));
			bigIntegerTableField.Properties.CalcFormula.Set(CalcFormula);
			bigIntegerTableField.Properties.CaptionClass = CaptionClass;
			bigIntegerTableField.Properties.DataClassification = DataClassification;
			bigIntegerTableField.Properties.Description = Description;
			bigIntegerTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			bigIntegerTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			bigIntegerTableField.Properties.ExternalAccess = ExternalAccess;
			bigIntegerTableField.Properties.ExternalName = ExternalName;
			bigIntegerTableField.Properties.ExternalType = ExternalType;
			bigIntegerTableField.Properties.FieldClass = FieldClass;
			bigIntegerTableField.Properties.InitValue = InitValue;
			bigIntegerTableField.Properties.MaxValue = MaxValue;
			bigIntegerTableField.Properties.MinValue = MinValue;
			bigIntegerTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			bigIntegerTableField.Properties.ObsoleteReason = ObsoleteReason;
			bigIntegerTableField.Properties.ObsoleteState = ObsoleteState;
			bigIntegerTableField.Properties.SignDisplacement = SignDisplacement;
			bigIntegerTableField.Properties.SqlTimestamp = NullableBooleanFromSwitch(nameof(SqlTimestamp));
			bigIntegerTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			bigIntegerTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			bigIntegerTableField.Properties.ValuesAllowed = ValuesAllowed;
			bigIntegerTableField.Properties.Volatile = NullableBooleanFromSwitch(nameof(Volatile));
			bigIntegerTableField.Properties.Width = Width;
			bigIntegerTableField.Properties.AccessByPermission.Set(AccessByPermission);

			bigIntegerTableField.Properties.OnValidate.Set(OnValidate);
			bigIntegerTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				bigIntegerTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                bigIntegerTableField.AutoCaption();

			yield return bigIntegerTableField;
		}

        protected override void AddItemToInputObject(BigIntegerTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public SwitchParameter AutoIncrement { get;set; }

	[Parameter()]
	public Nullable<BlankNumbers> BlankNumbers { get;set; }

	[Parameter()]
	public SwitchParameter BlankZero { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public Nullable<Int64> InitValue { get;set; }

	[Parameter()]
	public Nullable<Int64> MaxValue { get;set; }

	[Parameter()]
	public Nullable<Int64> MinValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public Nullable<Int32> SignDisplacement { get;set; }

	[Parameter()]
	public SwitchParameter SqlTimestamp { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public SwitchParameter Volatile { get;set; }

	[Parameter()]
	public Nullable<Int32> Width { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeBinaryTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(BinaryTableField))]
	[Alias("BinaryField", "Add-CBreezeBinaryTableField")]
	public class NewCBreezeBinaryTableField : NewItemWithIDAndNameCmdlet<BinaryTableField, int, Table>
	{

		[Parameter()]
		[ValidateRange(1, 250)]
		public int? DataLength { get; set; } 	

		protected override IEnumerable<BinaryTableField> CreateItems()
		{
			var binaryTableField = new BinaryTableField(ID, Name, DataLength ?? 4);
			binaryTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			binaryTableField.Properties.CaptionML.Set(CaptionML);
            binaryTableField.Properties.Description = Description;

			binaryTableField.Properties.DataClassification = DataClassification;
			binaryTableField.Properties.Description = Description;
			binaryTableField.Properties.ObsoleteReason = ObsoleteReason;
			binaryTableField.Properties.ObsoleteState = ObsoleteState;
			binaryTableField.Properties.AccessByPermission.Set(AccessByPermission);

			binaryTableField.Properties.OnValidate.Set(OnValidate);
			binaryTableField.Properties.OnLookup.Set(OnLookup);


			if (AutoCaption)
                binaryTableField.AutoCaption();

			yield return binaryTableField;
		}

        protected override void AddItemToInputObject(BinaryTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

	}

	[Cmdlet(VerbsCommon.New, "CBreezeBlobTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(BlobTableField))]
	[Alias("BlobField", "Add-CBreezeBlobTableField")]
	public class NewCBreezeBlobTableField : NewItemWithIDAndNameCmdlet<BlobTableField, int, Table>
	{


		protected override IEnumerable<BlobTableField> CreateItems()
		{
			var blobTableField = new BlobTableField(ID, Name);
			blobTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			blobTableField.Properties.CaptionML.Set(CaptionML);
            blobTableField.Properties.Description = Description;

			blobTableField.Properties.Compressed = NullableBooleanFromSwitch(nameof(Compressed));
			blobTableField.Properties.DataClassification = DataClassification;
			blobTableField.Properties.Description = Description;
			blobTableField.Properties.ExternalAccess = ExternalAccess;
			blobTableField.Properties.ExternalName = ExternalName;
			blobTableField.Properties.ExternalType = ExternalType;
			blobTableField.Properties.ObsoleteReason = ObsoleteReason;
			blobTableField.Properties.ObsoleteState = ObsoleteState;
			blobTableField.Properties.Owner = Owner;
			blobTableField.Properties.SubType = SubType;
			blobTableField.Properties.Volatile = NullableBooleanFromSwitch(nameof(Volatile));
			blobTableField.Properties.AccessByPermission.Set(AccessByPermission);

			blobTableField.Properties.OnValidate.Set(OnValidate);
			blobTableField.Properties.OnLookup.Set(OnLookup);


			if (AutoCaption)
                blobTableField.AutoCaption();

			yield return blobTableField;
		}

        protected override void AddItemToInputObject(BlobTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public SwitchParameter Compressed { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public String Owner { get;set; }

	[Parameter()]
	public Nullable<BlobSubType> SubType { get;set; }

	[Parameter()]
	public SwitchParameter Volatile { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

	}

	[Cmdlet(VerbsCommon.New, "CBreezeBooleanTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(BooleanTableField))]
	[Alias("BooleanField", "Add-CBreezeBooleanTableField")]
	public class NewCBreezeBooleanTableField : NewItemWithIDAndNameCmdlet<BooleanTableField, int, Table>
	{


		protected override IEnumerable<BooleanTableField> CreateItems()
		{
			var booleanTableField = new BooleanTableField(ID, Name);
			booleanTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			booleanTableField.Properties.CaptionML.Set(CaptionML);
            booleanTableField.Properties.Description = Description;

			booleanTableField.Properties.AltSearchField = AltSearchField;
			booleanTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			booleanTableField.Properties.AutoFormatType = AutoFormatType;
			booleanTableField.Properties.BlankNumbers = BlankNumbers;
			booleanTableField.Properties.BlankZero = NullableBooleanFromSwitch(nameof(BlankZero));
			booleanTableField.Properties.CalcFormula.Set(CalcFormula);
			booleanTableField.Properties.CaptionClass = CaptionClass;
			booleanTableField.Properties.DataClassification = DataClassification;
			booleanTableField.Properties.Description = Description;
			booleanTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			booleanTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			booleanTableField.Properties.ExternalAccess = ExternalAccess;
			booleanTableField.Properties.ExternalName = ExternalName;
			booleanTableField.Properties.ExternalType = ExternalType;
			booleanTableField.Properties.FieldClass = FieldClass;
			booleanTableField.Properties.InitValue = NullableBooleanFromSwitch(nameof(InitValue));
			booleanTableField.Properties.MaxValue = NullableBooleanFromSwitch(nameof(MaxValue));
			booleanTableField.Properties.MinValue = NullableBooleanFromSwitch(nameof(MinValue));
			booleanTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			booleanTableField.Properties.ObsoleteReason = ObsoleteReason;
			booleanTableField.Properties.ObsoleteState = ObsoleteState;
			booleanTableField.Properties.SignDisplacement = SignDisplacement;
			booleanTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			booleanTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			booleanTableField.Properties.ValuesAllowed = ValuesAllowed;
			booleanTableField.Properties.AccessByPermission.Set(AccessByPermission);

			booleanTableField.Properties.OnValidate.Set(OnValidate);
			booleanTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				booleanTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                booleanTableField.AutoCaption();

			yield return booleanTableField;
		}

        protected override void AddItemToInputObject(BooleanTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public Nullable<BlankNumbers> BlankNumbers { get;set; }

	[Parameter()]
	public SwitchParameter BlankZero { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public SwitchParameter InitValue { get;set; }

	[Parameter()]
	public SwitchParameter MaxValue { get;set; }

	[Parameter()]
	public SwitchParameter MinValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public Nullable<Int32> SignDisplacement { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeMediaSetTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(MediaSetTableField))]
	[Alias("MediaSetField", "Add-CBreezeMediaSetTableField")]
	public class NewCBreezeMediaSetTableField : NewItemWithIDAndNameCmdlet<MediaSetTableField, int, Table>
	{


		protected override IEnumerable<MediaSetTableField> CreateItems()
		{
			var mediaSetTableField = new MediaSetTableField(ID, Name);
			mediaSetTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			mediaSetTableField.Properties.CaptionML.Set(CaptionML);
            mediaSetTableField.Properties.Description = Description;

			mediaSetTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			mediaSetTableField.Properties.AutoFormatType = AutoFormatType;
			mediaSetTableField.Properties.CalcFormula.Set(CalcFormula);
			mediaSetTableField.Properties.CaptionClass = CaptionClass;
			mediaSetTableField.Properties.DataClassification = DataClassification;
			mediaSetTableField.Properties.Description = Description;
			mediaSetTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			mediaSetTableField.Properties.ExtendedDataType = ExtendedDataType;
			mediaSetTableField.Properties.FieldClass = FieldClass;
			mediaSetTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			mediaSetTableField.Properties.ObsoleteReason = ObsoleteReason;
			mediaSetTableField.Properties.ObsoleteState = ObsoleteState;
			mediaSetTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			mediaSetTableField.Properties.AccessByPermission.Set(AccessByPermission);

			mediaSetTableField.Properties.OnValidate.Set(OnValidate);
			mediaSetTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				mediaSetTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                mediaSetTableField.AutoCaption();

			yield return mediaSetTableField;
		}

        protected override void AddItemToInputObject(MediaSetTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDataType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeMediaTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(MediaTableField))]
	[Alias("MediaField", "Add-CBreezeMediaTableField")]
	public class NewCBreezeMediaTableField : NewItemWithIDAndNameCmdlet<MediaTableField, int, Table>
	{


		protected override IEnumerable<MediaTableField> CreateItems()
		{
			var mediaTableField = new MediaTableField(ID, Name);
			mediaTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			mediaTableField.Properties.CaptionML.Set(CaptionML);
            mediaTableField.Properties.Description = Description;

			mediaTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			mediaTableField.Properties.AutoFormatType = AutoFormatType;
			mediaTableField.Properties.CalcFormula.Set(CalcFormula);
			mediaTableField.Properties.CaptionClass = CaptionClass;
			mediaTableField.Properties.DataClassification = DataClassification;
			mediaTableField.Properties.Description = Description;
			mediaTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			mediaTableField.Properties.ExtendedDataType = ExtendedDataType;
			mediaTableField.Properties.FieldClass = FieldClass;
			mediaTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			mediaTableField.Properties.ObsoleteReason = ObsoleteReason;
			mediaTableField.Properties.ObsoleteState = ObsoleteState;
			mediaTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			mediaTableField.Properties.AccessByPermission.Set(AccessByPermission);

			mediaTableField.Properties.OnValidate.Set(OnValidate);
			mediaTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				mediaTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                mediaTableField.AutoCaption();

			yield return mediaTableField;
		}

        protected override void AddItemToInputObject(MediaTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDataType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeCodeTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(CodeTableField))]
	[Alias("CodeField", "Add-CBreezeCodeTableField")]
	public class NewCBreezeCodeTableField : NewItemWithIDAndNameCmdlet<CodeTableField, int, Table>
	{

		[Parameter()]
		[ValidateRange(1, 250)]
		public int? DataLength { get; set; } 	

		protected override IEnumerable<CodeTableField> CreateItems()
		{
			var codeTableField = new CodeTableField(ID, Name, DataLength ?? 10);
			codeTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			codeTableField.Properties.CaptionML.Set(CaptionML);
            codeTableField.Properties.Description = Description;

			codeTableField.Properties.AltSearchField = AltSearchField;
			codeTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			codeTableField.Properties.AutoFormatType = AutoFormatType;
			codeTableField.Properties.CalcFormula.Set(CalcFormula);
			codeTableField.Properties.CaptionClass = CaptionClass;
			codeTableField.Properties.CharAllowed = CharAllowed;
			codeTableField.Properties.DataClassification = DataClassification;
			codeTableField.Properties.DateFormula = NullableBooleanFromSwitch(nameof(DateFormula));
			codeTableField.Properties.Description = Description;
			codeTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			codeTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			codeTableField.Properties.ExternalAccess = ExternalAccess;
			codeTableField.Properties.ExternalName = ExternalName;
			codeTableField.Properties.ExternalType = ExternalType;
			codeTableField.Properties.FieldClass = FieldClass;
			codeTableField.Properties.InitValue = InitValue;
			codeTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			codeTableField.Properties.Numeric = NullableBooleanFromSwitch(nameof(Numeric));
			codeTableField.Properties.ObsoleteReason = ObsoleteReason;
			codeTableField.Properties.ObsoleteState = ObsoleteState;
			codeTableField.Properties.SQLDataType = SQLDataType;
			codeTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			codeTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			codeTableField.Properties.ValuesAllowed = ValuesAllowed;
			codeTableField.Properties.Width = Width;
			codeTableField.Properties.AccessByPermission.Set(AccessByPermission);

			codeTableField.Properties.OnValidate.Set(OnValidate);
			codeTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				codeTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                codeTableField.AutoCaption();

			yield return codeTableField;
		}

        protected override void AddItemToInputObject(CodeTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public String CharAllowed { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public SwitchParameter DateFormula { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public String InitValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public SwitchParameter Numeric { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public Nullable<SqlDataType> SQLDataType { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public Nullable<Int32> Width { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeDateFormulaTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(DateFormulaTableField))]
	[Alias("DateFormulaField", "Add-CBreezeDateFormulaTableField")]
	public class NewCBreezeDateFormulaTableField : NewItemWithIDAndNameCmdlet<DateFormulaTableField, int, Table>
	{


		protected override IEnumerable<DateFormulaTableField> CreateItems()
		{
			var dateFormulaTableField = new DateFormulaTableField(ID, Name);
			dateFormulaTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			dateFormulaTableField.Properties.CaptionML.Set(CaptionML);
            dateFormulaTableField.Properties.Description = Description;

			dateFormulaTableField.Properties.AltSearchField = AltSearchField;
			dateFormulaTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			dateFormulaTableField.Properties.AutoFormatType = AutoFormatType;
			dateFormulaTableField.Properties.CalcFormula.Set(CalcFormula);
			dateFormulaTableField.Properties.CaptionClass = CaptionClass;
			dateFormulaTableField.Properties.DataClassification = DataClassification;
			dateFormulaTableField.Properties.Description = Description;
			dateFormulaTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			dateFormulaTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			dateFormulaTableField.Properties.ExternalAccess = ExternalAccess;
			dateFormulaTableField.Properties.ExternalName = ExternalName;
			dateFormulaTableField.Properties.ExternalType = ExternalType;
			dateFormulaTableField.Properties.FieldClass = FieldClass;
			dateFormulaTableField.Properties.InitValue = InitValue;
			dateFormulaTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			dateFormulaTableField.Properties.ObsoleteReason = ObsoleteReason;
			dateFormulaTableField.Properties.ObsoleteState = ObsoleteState;
			dateFormulaTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			dateFormulaTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			dateFormulaTableField.Properties.ValuesAllowed = ValuesAllowed;
			dateFormulaTableField.Properties.AccessByPermission.Set(AccessByPermission);

			dateFormulaTableField.Properties.OnValidate.Set(OnValidate);
			dateFormulaTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				dateFormulaTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                dateFormulaTableField.AutoCaption();

			yield return dateFormulaTableField;
		}

        protected override void AddItemToInputObject(DateFormulaTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public String InitValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeDateTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(DateTableField))]
	[Alias("DateField", "Add-CBreezeDateTableField")]
	public class NewCBreezeDateTableField : NewItemWithIDAndNameCmdlet<DateTableField, int, Table>
	{


		protected override IEnumerable<DateTableField> CreateItems()
		{
			var dateTableField = new DateTableField(ID, Name);
			dateTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			dateTableField.Properties.CaptionML.Set(CaptionML);
            dateTableField.Properties.Description = Description;

			dateTableField.Properties.AltSearchField = AltSearchField;
			dateTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			dateTableField.Properties.AutoFormatType = AutoFormatType;
			dateTableField.Properties.BlankNumbers = BlankNumbers;
			dateTableField.Properties.CalcFormula.Set(CalcFormula);
			dateTableField.Properties.CaptionClass = CaptionClass;
			dateTableField.Properties.ClosingDates = NullableBooleanFromSwitch(nameof(ClosingDates));
			dateTableField.Properties.DataClassification = DataClassification;
			dateTableField.Properties.Description = Description;
			dateTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			dateTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			dateTableField.Properties.ExternalAccess = ExternalAccess;
			dateTableField.Properties.ExternalName = ExternalName;
			dateTableField.Properties.ExternalType = ExternalType;
			dateTableField.Properties.FieldClass = FieldClass;
			dateTableField.Properties.InitValue = InitValue;
			dateTableField.Properties.MaxValue = MaxValue;
			dateTableField.Properties.MinValue = MinValue;
			dateTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			dateTableField.Properties.ObsoleteReason = ObsoleteReason;
			dateTableField.Properties.ObsoleteState = ObsoleteState;
			dateTableField.Properties.SignDisplacement = SignDisplacement;
			dateTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			dateTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			dateTableField.Properties.ValuesAllowed = ValuesAllowed;
			dateTableField.Properties.AccessByPermission.Set(AccessByPermission);

			dateTableField.Properties.OnValidate.Set(OnValidate);
			dateTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				dateTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                dateTableField.AutoCaption();

			yield return dateTableField;
		}

        protected override void AddItemToInputObject(DateTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public Nullable<BlankNumbers> BlankNumbers { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public SwitchParameter ClosingDates { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public Nullable<DateTime> InitValue { get;set; }

	[Parameter()]
	public Nullable<DateTime> MaxValue { get;set; }

	[Parameter()]
	public Nullable<DateTime> MinValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public Nullable<Int32> SignDisplacement { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeDateTimeTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(DateTimeTableField))]
	[Alias("DateTimeField", "Add-CBreezeDateTimeTableField")]
	public class NewCBreezeDateTimeTableField : NewItemWithIDAndNameCmdlet<DateTimeTableField, int, Table>
	{


		protected override IEnumerable<DateTimeTableField> CreateItems()
		{
			var dateTimeTableField = new DateTimeTableField(ID, Name);
			dateTimeTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			dateTimeTableField.Properties.CaptionML.Set(CaptionML);
            dateTimeTableField.Properties.Description = Description;

			dateTimeTableField.Properties.AltSearchField = AltSearchField;
			dateTimeTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			dateTimeTableField.Properties.AutoFormatType = AutoFormatType;
			dateTimeTableField.Properties.BlankNumbers = BlankNumbers;
			dateTimeTableField.Properties.CalcFormula.Set(CalcFormula);
			dateTimeTableField.Properties.CaptionClass = CaptionClass;
			dateTimeTableField.Properties.DataClassification = DataClassification;
			dateTimeTableField.Properties.Description = Description;
			dateTimeTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			dateTimeTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			dateTimeTableField.Properties.ExternalAccess = ExternalAccess;
			dateTimeTableField.Properties.ExternalName = ExternalName;
			dateTimeTableField.Properties.ExternalType = ExternalType;
			dateTimeTableField.Properties.FieldClass = FieldClass;
			dateTimeTableField.Properties.InitValue = InitValue;
			dateTimeTableField.Properties.MaxValue = MaxValue;
			dateTimeTableField.Properties.MinValue = MinValue;
			dateTimeTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			dateTimeTableField.Properties.ObsoleteReason = ObsoleteReason;
			dateTimeTableField.Properties.ObsoleteState = ObsoleteState;
			dateTimeTableField.Properties.SignDisplacement = SignDisplacement;
			dateTimeTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			dateTimeTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			dateTimeTableField.Properties.ValuesAllowed = ValuesAllowed;
			dateTimeTableField.Properties.Volatile = NullableBooleanFromSwitch(nameof(Volatile));
			dateTimeTableField.Properties.AccessByPermission.Set(AccessByPermission);

			dateTimeTableField.Properties.OnValidate.Set(OnValidate);
			dateTimeTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				dateTimeTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                dateTimeTableField.AutoCaption();

			yield return dateTimeTableField;
		}

        protected override void AddItemToInputObject(DateTimeTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public Nullable<BlankNumbers> BlankNumbers { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public Nullable<DateTime> InitValue { get;set; }

	[Parameter()]
	public Nullable<DateTime> MaxValue { get;set; }

	[Parameter()]
	public Nullable<DateTime> MinValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public Nullable<Int32> SignDisplacement { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public SwitchParameter Volatile { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeDecimalTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(DecimalTableField))]
	[Alias("DecimalField", "Add-CBreezeDecimalTableField")]
	public class NewCBreezeDecimalTableField : NewItemWithIDAndNameCmdlet<DecimalTableField, int, Table>
	{


		protected override IEnumerable<DecimalTableField> CreateItems()
		{
			var decimalTableField = new DecimalTableField(ID, Name);
			decimalTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			decimalTableField.Properties.CaptionML.Set(CaptionML);
            decimalTableField.Properties.Description = Description;

			decimalTableField.Properties.AltSearchField = AltSearchField;
			decimalTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			decimalTableField.Properties.AutoFormatType = AutoFormatType;
			decimalTableField.Properties.BlankNumbers = BlankNumbers;
			decimalTableField.Properties.BlankZero = NullableBooleanFromSwitch(nameof(BlankZero));
			decimalTableField.Properties.CalcFormula.Set(CalcFormula);
			decimalTableField.Properties.CaptionClass = CaptionClass;
			decimalTableField.Properties.DataClassification = DataClassification;
			decimalTableField.Properties.DecimalPlaces.AtLeast = DecimalPlacesAtLeast;
			decimalTableField.Properties.DecimalPlaces.AtMost = DecimalPlacesAtMost;
			decimalTableField.Properties.Description = Description;
			decimalTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			decimalTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			decimalTableField.Properties.ExternalAccess = ExternalAccess;
			decimalTableField.Properties.ExternalName = ExternalName;
			decimalTableField.Properties.ExternalType = ExternalType;
			decimalTableField.Properties.FieldClass = FieldClass;
			decimalTableField.Properties.InitValue = InitValue;
			decimalTableField.Properties.MaxValue = MaxValue;
			decimalTableField.Properties.MinValue = MinValue;
			decimalTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			decimalTableField.Properties.ObsoleteReason = ObsoleteReason;
			decimalTableField.Properties.ObsoleteState = ObsoleteState;
			decimalTableField.Properties.SignDisplacement = SignDisplacement;
			decimalTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			decimalTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			decimalTableField.Properties.ValuesAllowed = ValuesAllowed;
			decimalTableField.Properties.Width = Width;
			decimalTableField.Properties.AccessByPermission.Set(AccessByPermission);

			decimalTableField.Properties.OnValidate.Set(OnValidate);
			decimalTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				decimalTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                decimalTableField.AutoCaption();

			yield return decimalTableField;
		}

        protected override void AddItemToInputObject(DecimalTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public Nullable<BlankNumbers> BlankNumbers { get;set; }

	[Parameter()]
	public SwitchParameter BlankZero { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public Nullable<Int32> DecimalPlacesAtLeast { get;set; }

	[Parameter()]
	public Nullable<Int32> DecimalPlacesAtMost { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public Nullable<Decimal> InitValue { get;set; }

	[Parameter()]
	public Nullable<Decimal> MaxValue { get;set; }

	[Parameter()]
	public Nullable<Decimal> MinValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public Nullable<Int32> SignDisplacement { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public Nullable<Int32> Width { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeDurationTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(DurationTableField))]
	[Alias("DurationField", "Add-CBreezeDurationTableField")]
	public class NewCBreezeDurationTableField : NewItemWithIDAndNameCmdlet<DurationTableField, int, Table>
	{


		protected override IEnumerable<DurationTableField> CreateItems()
		{
			var durationTableField = new DurationTableField(ID, Name);
			durationTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			durationTableField.Properties.CaptionML.Set(CaptionML);
            durationTableField.Properties.Description = Description;

			durationTableField.Properties.AltSearchField = AltSearchField;
			durationTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			durationTableField.Properties.AutoFormatType = AutoFormatType;
			durationTableField.Properties.BlankNumbers = BlankNumbers;
			durationTableField.Properties.BlankZero = NullableBooleanFromSwitch(nameof(BlankZero));
			durationTableField.Properties.CalcFormula.Set(CalcFormula);
			durationTableField.Properties.CaptionClass = CaptionClass;
			durationTableField.Properties.DataClassification = DataClassification;
			durationTableField.Properties.Description = Description;
			durationTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			durationTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			durationTableField.Properties.ExternalAccess = ExternalAccess;
			durationTableField.Properties.ExternalName = ExternalName;
			durationTableField.Properties.ExternalType = ExternalType;
			durationTableField.Properties.FieldClass = FieldClass;
			durationTableField.Properties.InitValue = InitValue;
			durationTableField.Properties.MaxValue = MaxValue;
			durationTableField.Properties.MinValue = MinValue;
			durationTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			durationTableField.Properties.ObsoleteReason = ObsoleteReason;
			durationTableField.Properties.ObsoleteState = ObsoleteState;
			durationTableField.Properties.SignDisplacement = SignDisplacement;
			durationTableField.Properties.StandardDayTimeUnit = StandardDayTimeUnit;
			durationTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			durationTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			durationTableField.Properties.ValuesAllowed = ValuesAllowed;
			durationTableField.Properties.AccessByPermission.Set(AccessByPermission);

			durationTableField.Properties.OnValidate.Set(OnValidate);
			durationTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				durationTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                durationTableField.AutoCaption();

			yield return durationTableField;
		}

        protected override void AddItemToInputObject(DurationTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public Nullable<BlankNumbers> BlankNumbers { get;set; }

	[Parameter()]
	public SwitchParameter BlankZero { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public Nullable<TimeSpan> InitValue { get;set; }

	[Parameter()]
	public Nullable<TimeSpan> MaxValue { get;set; }

	[Parameter()]
	public Nullable<TimeSpan> MinValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public Nullable<Int32> SignDisplacement { get;set; }

	[Parameter()]
	public Nullable<StandardDayTimeUnit> StandardDayTimeUnit { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeGuidTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(GuidTableField))]
	[Alias("GuidField", "Add-CBreezeGuidTableField")]
	public class NewCBreezeGuidTableField : NewItemWithIDAndNameCmdlet<GuidTableField, int, Table>
	{


		protected override IEnumerable<GuidTableField> CreateItems()
		{
			var guidTableField = new GuidTableField(ID, Name);
			guidTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			guidTableField.Properties.CaptionML.Set(CaptionML);
            guidTableField.Properties.Description = Description;

			guidTableField.Properties.AltSearchField = AltSearchField;
			guidTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			guidTableField.Properties.AutoFormatType = AutoFormatType;
			guidTableField.Properties.CalcFormula.Set(CalcFormula);
			guidTableField.Properties.CaptionClass = CaptionClass;
			guidTableField.Properties.DataClassification = DataClassification;
			guidTableField.Properties.Description = Description;
			guidTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			guidTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			guidTableField.Properties.ExternalAccess = ExternalAccess;
			guidTableField.Properties.ExternalName = ExternalName;
			guidTableField.Properties.ExternalType = ExternalType;
			guidTableField.Properties.FieldClass = FieldClass;
			guidTableField.Properties.InitValue = InitValue;
			guidTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			guidTableField.Properties.ObsoleteReason = ObsoleteReason;
			guidTableField.Properties.ObsoleteState = ObsoleteState;
			guidTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			guidTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			guidTableField.Properties.ValuesAllowed = ValuesAllowed;
			guidTableField.Properties.AccessByPermission.Set(AccessByPermission);

			guidTableField.Properties.OnValidate.Set(OnValidate);
			guidTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				guidTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                guidTableField.AutoCaption();

			yield return guidTableField;
		}

        protected override void AddItemToInputObject(GuidTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public Nullable<Guid> InitValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeIntegerTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(IntegerTableField))]
	[Alias("IntegerField", "Add-CBreezeIntegerTableField")]
	public class NewCBreezeIntegerTableField : NewItemWithIDAndNameCmdlet<IntegerTableField, int, Table>
	{


		protected override IEnumerable<IntegerTableField> CreateItems()
		{
			var integerTableField = new IntegerTableField(ID, Name);
			integerTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			integerTableField.Properties.CaptionML.Set(CaptionML);
            integerTableField.Properties.Description = Description;

			integerTableField.Properties.AltSearchField = AltSearchField;
			integerTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			integerTableField.Properties.AutoFormatType = AutoFormatType;
			integerTableField.Properties.AutoIncrement = NullableBooleanFromSwitch(nameof(AutoIncrement));
			integerTableField.Properties.BlankNumbers = BlankNumbers;
			integerTableField.Properties.BlankZero = NullableBooleanFromSwitch(nameof(BlankZero));
			integerTableField.Properties.CalcFormula.Set(CalcFormula);
			integerTableField.Properties.CaptionClass = CaptionClass;
			integerTableField.Properties.DataClassification = DataClassification;
			integerTableField.Properties.Description = Description;
			integerTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			integerTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			integerTableField.Properties.ExternalAccess = ExternalAccess;
			integerTableField.Properties.ExternalName = ExternalName;
			integerTableField.Properties.ExternalType = ExternalType;
			integerTableField.Properties.FieldClass = FieldClass;
			integerTableField.Properties.InitValue = InitValue;
			integerTableField.Properties.MaxValue = MaxValue;
			integerTableField.Properties.MinValue = MinValue;
			integerTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			integerTableField.Properties.ObsoleteReason = ObsoleteReason;
			integerTableField.Properties.ObsoleteState = ObsoleteState;
			integerTableField.Properties.SignDisplacement = SignDisplacement;
			integerTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			integerTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			integerTableField.Properties.ValuesAllowed = ValuesAllowed;
			integerTableField.Properties.Volatile = NullableBooleanFromSwitch(nameof(Volatile));
			integerTableField.Properties.Width = Width;
			integerTableField.Properties.AccessByPermission.Set(AccessByPermission);

			integerTableField.Properties.OnValidate.Set(OnValidate);
			integerTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				integerTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                integerTableField.AutoCaption();

			yield return integerTableField;
		}

        protected override void AddItemToInputObject(IntegerTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public SwitchParameter AutoIncrement { get;set; }

	[Parameter()]
	public Nullable<BlankNumbers> BlankNumbers { get;set; }

	[Parameter()]
	public SwitchParameter BlankZero { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public Nullable<Int32> InitValue { get;set; }

	[Parameter()]
	public Nullable<Int32> MaxValue { get;set; }

	[Parameter()]
	public Nullable<Int32> MinValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public Nullable<Int32> SignDisplacement { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public SwitchParameter Volatile { get;set; }

	[Parameter()]
	public Nullable<Int32> Width { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeOptionTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(OptionTableField))]
	[Alias("OptionField", "Add-CBreezeOptionTableField")]
	public class NewCBreezeOptionTableField : NewItemWithIDAndNameCmdlet<OptionTableField, int, Table>
	{


		protected override IEnumerable<OptionTableField> CreateItems()
		{
			var optionTableField = new OptionTableField(ID, Name);
			optionTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			optionTableField.Properties.CaptionML.Set(CaptionML);
            optionTableField.Properties.Description = Description;

			optionTableField.Properties.AltSearchField = AltSearchField;
			optionTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			optionTableField.Properties.AutoFormatType = AutoFormatType;
			optionTableField.Properties.BlankNumbers = BlankNumbers;
			optionTableField.Properties.BlankZero = NullableBooleanFromSwitch(nameof(BlankZero));
			optionTableField.Properties.CalcFormula.Set(CalcFormula);
			optionTableField.Properties.CaptionClass = CaptionClass;
			optionTableField.Properties.DataClassification = DataClassification;
			optionTableField.Properties.Description = Description;
			optionTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			optionTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			optionTableField.Properties.ExternalAccess = ExternalAccess;
			optionTableField.Properties.ExternalName = ExternalName;
			optionTableField.Properties.ExternalType = ExternalType;
			optionTableField.Properties.FieldClass = FieldClass;
			optionTableField.Properties.InitValue = InitValue;
			optionTableField.Properties.MaxValue = MaxValue;
			optionTableField.Properties.MinValue = MinValue;
			optionTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			optionTableField.Properties.ObsoleteReason = ObsoleteReason;
			optionTableField.Properties.ObsoleteState = ObsoleteState;
			optionTableField.Properties.OptionOrdinalValues = OptionOrdinalValues;
			optionTableField.Properties.OptionString = OptionString;
			optionTableField.Properties.SignDisplacement = SignDisplacement;
			optionTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			optionTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			optionTableField.Properties.ValuesAllowed = ValuesAllowed;
			optionTableField.Properties.OptionCaptionML.Set(OptionCaptionML);
			
			if (AutoOptionCaption) 
				optionTableField.AutoOptionCaption();
			optionTableField.Properties.AccessByPermission.Set(AccessByPermission);

			optionTableField.Properties.OnValidate.Set(OnValidate);
			optionTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				optionTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                optionTableField.AutoCaption();

			yield return optionTableField;
		}

        protected override void AddItemToInputObject(OptionTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public Nullable<BlankNumbers> BlankNumbers { get;set; }

	[Parameter()]
	public SwitchParameter BlankZero { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public String InitValue { get;set; }

	[Parameter()]
	public String MaxValue { get;set; }

	[Parameter()]
	public String MinValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public String OptionOrdinalValues { get;set; }

	[Parameter(Mandatory=true)]
	public String OptionString { get;set; }

	[Parameter()]
	public Nullable<Int32> SignDisplacement { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public Hashtable OptionCaptionML { get;set; }

	[Parameter()]
	public SwitchParameter AutoOptionCaption { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeRecordIDTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(RecordIDTableField))]
	[Alias("RecordIDField", "Add-CBreezeRecordIDTableField")]
	public class NewCBreezeRecordIDTableField : NewItemWithIDAndNameCmdlet<RecordIDTableField, int, Table>
	{


		protected override IEnumerable<RecordIDTableField> CreateItems()
		{
			var recordIDTableField = new RecordIDTableField(ID, Name);
			recordIDTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			recordIDTableField.Properties.CaptionML.Set(CaptionML);
            recordIDTableField.Properties.Description = Description;

			recordIDTableField.Properties.AltSearchField = AltSearchField;
			recordIDTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			recordIDTableField.Properties.AutoFormatType = AutoFormatType;
			recordIDTableField.Properties.CalcFormula.Set(CalcFormula);
			recordIDTableField.Properties.CaptionClass = CaptionClass;
			recordIDTableField.Properties.DataClassification = DataClassification;
			recordIDTableField.Properties.Description = Description;
			recordIDTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			recordIDTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			recordIDTableField.Properties.ExternalAccess = ExternalAccess;
			recordIDTableField.Properties.ExternalName = ExternalName;
			recordIDTableField.Properties.ExternalType = ExternalType;
			recordIDTableField.Properties.FieldClass = FieldClass;
			recordIDTableField.Properties.InitValue = InitValue;
			recordIDTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			recordIDTableField.Properties.ObsoleteReason = ObsoleteReason;
			recordIDTableField.Properties.ObsoleteState = ObsoleteState;
			recordIDTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			recordIDTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			recordIDTableField.Properties.ValuesAllowed = ValuesAllowed;
			recordIDTableField.Properties.AccessByPermission.Set(AccessByPermission);

			recordIDTableField.Properties.OnValidate.Set(OnValidate);
			recordIDTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				recordIDTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                recordIDTableField.AutoCaption();

			yield return recordIDTableField;
		}

        protected override void AddItemToInputObject(RecordIDTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public String InitValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeTableFilterTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(TableFilterTableField))]
	[Alias("FilterField", "Add-CBreezeTableFilterTableField")]
	public class NewCBreezeTableFilterTableField : NewItemWithIDAndNameCmdlet<TableFilterTableField, int, Table>
	{


		protected override IEnumerable<TableFilterTableField> CreateItems()
		{
			var tableFilterTableField = new TableFilterTableField(ID, Name);
			tableFilterTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			tableFilterTableField.Properties.CaptionML.Set(CaptionML);
            tableFilterTableField.Properties.Description = Description;

			tableFilterTableField.Properties.DataClassification = DataClassification;
			tableFilterTableField.Properties.Description = Description;
			tableFilterTableField.Properties.ObsoleteReason = ObsoleteReason;
			tableFilterTableField.Properties.ObsoleteState = ObsoleteState;
			tableFilterTableField.Properties.TableIDExpr = TableIDExpr;
			tableFilterTableField.Properties.AccessByPermission.Set(AccessByPermission);

			tableFilterTableField.Properties.OnValidate.Set(OnValidate);
			tableFilterTableField.Properties.OnLookup.Set(OnLookup);


			if (AutoCaption)
                tableFilterTableField.AutoCaption();

			yield return tableFilterTableField;
		}

        protected override void AddItemToInputObject(TableFilterTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public String TableIDExpr { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

	}

	[Cmdlet(VerbsCommon.New, "CBreezeTextTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(TextTableField))]
	[Alias("TextField", "Add-CBreezeTextTableField")]
	public class NewCBreezeTextTableField : NewItemWithIDAndNameCmdlet<TextTableField, int, Table>
	{

		[Parameter()]
		[ValidateRange(1, 250)]
		public int? DataLength { get; set; } 	

		protected override IEnumerable<TextTableField> CreateItems()
		{
			var textTableField = new TextTableField(ID, Name, DataLength ?? 30);
			textTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			textTableField.Properties.CaptionML.Set(CaptionML);
            textTableField.Properties.Description = Description;

			textTableField.Properties.AltSearchField = AltSearchField;
			textTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			textTableField.Properties.AutoFormatType = AutoFormatType;
			textTableField.Properties.CalcFormula.Set(CalcFormula);
			textTableField.Properties.CaptionClass = CaptionClass;
			textTableField.Properties.CharAllowed = CharAllowed;
			textTableField.Properties.DataClassification = DataClassification;
			textTableField.Properties.DateFormula = NullableBooleanFromSwitch(nameof(DateFormula));
			textTableField.Properties.Description = Description;
			textTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			textTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			textTableField.Properties.ExternalAccess = ExternalAccess;
			textTableField.Properties.ExternalName = ExternalName;
			textTableField.Properties.ExternalType = ExternalType;
			textTableField.Properties.FieldClass = FieldClass;
			textTableField.Properties.InitValue = InitValue;
			textTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			textTableField.Properties.Numeric = NullableBooleanFromSwitch(nameof(Numeric));
			textTableField.Properties.ObsoleteReason = ObsoleteReason;
			textTableField.Properties.ObsoleteState = ObsoleteState;
			textTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			textTableField.Properties.Title = NullableBooleanFromSwitch(nameof(Title));
			textTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			textTableField.Properties.ValuesAllowed = ValuesAllowed;
			textTableField.Properties.Width = Width;
			textTableField.Properties.AccessByPermission.Set(AccessByPermission);

			textTableField.Properties.OnValidate.Set(OnValidate);
			textTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				textTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                textTableField.AutoCaption();

			yield return textTableField;
		}

        protected override void AddItemToInputObject(TextTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public String CharAllowed { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public SwitchParameter DateFormula { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public String InitValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public SwitchParameter Numeric { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter Title { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public Nullable<Int32> Width { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

	[Cmdlet(VerbsCommon.New, "CBreezeTimeTableField", DefaultParameterSetName = ParameterSetNames.NewWithoutID)]
	[OutputType(typeof(TimeTableField))]
	[Alias("TimeField", "Add-CBreezeTimeTableField")]
	public class NewCBreezeTimeTableField : NewItemWithIDAndNameCmdlet<TimeTableField, int, Table>
	{


		protected override IEnumerable<TimeTableField> CreateItems()
		{
			var timeTableField = new TimeTableField(ID, Name);
			timeTableField.Enabled = NullableBooleanFromSwitch(nameof(Enabled));
			timeTableField.Properties.CaptionML.Set(CaptionML);
            timeTableField.Properties.Description = Description;

			timeTableField.Properties.AltSearchField = AltSearchField;
			timeTableField.Properties.AutoFormatExpr = AutoFormatExpr;
			timeTableField.Properties.AutoFormatType = AutoFormatType;
			timeTableField.Properties.BlankNumbers = BlankNumbers;
			timeTableField.Properties.CalcFormula.Set(CalcFormula);
			timeTableField.Properties.CaptionClass = CaptionClass;
			timeTableField.Properties.DataClassification = DataClassification;
			timeTableField.Properties.Description = Description;
			timeTableField.Properties.Editable = NullableBooleanFromSwitch(nameof(Editable));
			timeTableField.Properties.ExtendedDatatype = ExtendedDatatype;
			timeTableField.Properties.ExternalAccess = ExternalAccess;
			timeTableField.Properties.ExternalName = ExternalName;
			timeTableField.Properties.ExternalType = ExternalType;
			timeTableField.Properties.FieldClass = FieldClass;
			timeTableField.Properties.InitValue = InitValue;
			timeTableField.Properties.MaxValue = MaxValue;
			timeTableField.Properties.MinValue = MinValue;
			timeTableField.Properties.NotBlank = NullableBooleanFromSwitch(nameof(NotBlank));
			timeTableField.Properties.ObsoleteReason = ObsoleteReason;
			timeTableField.Properties.ObsoleteState = ObsoleteState;
			timeTableField.Properties.SignDisplacement = SignDisplacement;
			timeTableField.Properties.TestTableRelation = NullableBooleanFromSwitch(nameof(TestTableRelation));
			timeTableField.Properties.ValidateTableRelation = NullableBooleanFromSwitch(nameof(ValidateTableRelation));
			timeTableField.Properties.ValuesAllowed = ValuesAllowed;
			timeTableField.Properties.AccessByPermission.Set(AccessByPermission);

			timeTableField.Properties.OnValidate.Set(OnValidate);
			timeTableField.Properties.OnLookup.Set(OnLookup);

			if (SubObjects != null) 
			{
				var subObjects = SubObjects.Invoke().Select(o => o.BaseObject);
				timeTableField.Properties.TableRelation.AddRange(subObjects.OfType<TableRelationLine>());
			}

			if (AutoCaption)
                timeTableField.AutoCaption();

			yield return timeTableField;
		}

        protected override void AddItemToInputObject(TimeTableField item, Table inputObject)
        {
            inputObject.Fields.Add(item);
        }

        [Parameter()]
        public SwitchParameter AutoCaption { get; set; }

		[Parameter()]
		public Hashtable CaptionML { get; set; }

        [Parameter()]
        public SwitchParameter Enabled { get; set; }

	[Parameter()]
	public String AltSearchField { get;set; }

	[Parameter()]
	public String AutoFormatExpr { get;set; }

	[Parameter()]
	public Nullable<AutoFormatType> AutoFormatType { get;set; }

	[Parameter()]
	public Nullable<BlankNumbers> BlankNumbers { get;set; }

	[Parameter()]
	public CalcFormula CalcFormula { get;set; }

	[Parameter()]
	public String CaptionClass { get;set; }

	[Parameter()]
	public Nullable<DataClassification> DataClassification { get;set; }

	[Parameter()]
	public String Description { get;set; }

	[Parameter()]
	public SwitchParameter Editable { get;set; }

	[Parameter()]
	public Nullable<ExtendedDataType> ExtendedDatatype { get;set; }

	[Parameter()]
	public Nullable<ExternalAccess> ExternalAccess { get;set; }

	[Parameter()]
	public String ExternalName { get;set; }

	[Parameter()]
	public String ExternalType { get;set; }

	[Parameter()]
	public Nullable<FieldClass> FieldClass { get;set; }

	[Parameter()]
	public Nullable<TimeSpan> InitValue { get;set; }

	[Parameter()]
	public Nullable<TimeSpan> MaxValue { get;set; }

	[Parameter()]
	public Nullable<TimeSpan> MinValue { get;set; }

	[Parameter()]
	public SwitchParameter NotBlank { get;set; }

	[Parameter()]
	public String ObsoleteReason { get;set; }

	[Parameter()]
	public Nullable<ObsoleteState> ObsoleteState { get;set; }

	[Parameter()]
	public Nullable<Int32> SignDisplacement { get;set; }

	[Parameter()]
	public SwitchParameter TestTableRelation { get;set; }

	[Parameter()]
	public SwitchParameter ValidateTableRelation { get;set; }

	[Parameter()]
	public String ValuesAllowed { get;set; }

	[Parameter()]
	public AccessByPermission AccessByPermission { get;set; }


		[Parameter()]
		public ScriptBlock OnValidate {get; set;}

		[Parameter()]
		public ScriptBlock OnLookup { get; set; }

        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.NewWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.NewWithID)]
        [Parameter(Position = 2, ParameterSetName = ParameterSetNames.AddWithoutID)]
        [Parameter(Position = 3, ParameterSetName = ParameterSetNames.AddWithID)]
		public ScriptBlock SubObjects { get; set; } 
	}

}
